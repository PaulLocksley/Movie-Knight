@using System.Text
@using Movie_Knight.Models
@model Movie_Knight.Pages.UserComparison
@{ ArgumentNullException.ThrowIfNull(Model); }
<script>
    let graphsLoaded = false;
    let watchListLoaded = false;


    function openTab(evt, viewName) {
  // Declare all variables
  let i, tabcontent, tablinks;
  if (!graphsLoaded && viewName === "graphView"){
       htmx.ajax('GET', '/_Graph?'+ new URLSearchParams(window.location.search), 
                {target:'#graphView', swap:'innerHTML'})
      graphsLoaded = true
  }
  if (!watchListLoaded && viewName === "watchListView"){
    htmx.ajax('GET','/_WatchList?'+ new URLSearchParams(window.location.search),
        {target:'#watchListView',swap:'innerHTML'})
    watchListLoaded = true
  }
  // Get all elements with class="tabcontent" and hide them
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }

  // Get all elements with class="tablinks" and remove the class "active"
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }

  // Show the current tab, and add an "active" class to the button that opened the tab
  document.getElementById(viewName).style.display = "block";
  evt.currentTarget.className += " active";
}

var fetchedMovies = []

function showHidenRow(rowId) { 
    let r = document.getElementById(rowId)
    let img = document.getElementById("img-"+rowId)
    console.log(fetchedMovies)
    let id = rowId.split("-")[1]

    if(!fetchedMovies.includes(id)){
        htmx.ajax('GET', '/_filters?movieId='+id, 
                    {target:'#'+rowId, swap:'outerHTML'})
                    /*.then(() => {
                    document.getElementById(rowId).style.display = "contents"
                    })*/
        fetchedMovies.push(id)
        return
    }
    let current = r.style.display 
    console.log(current)
    if(current !== "none"){
        r.style.display = "none"  
        img.src = "img/expand_more.svg"  
    }else{
        r.style.display = "contents"   
        img.src = "img/expand_less.svg"  
    }
    
} 


</script>
<div class="tab container">
    <button class="tablinks" id="defaultOpen" onclick="openTab(event, 'tableView')">Table</button>
    <button class="tablinks" onclick="openTab(event, 'graphView')">Graphs</button>
    <button class="tablinks" onclick="openTab(event, 'watchListView')">Watch List</button>
    <button class="tablinks" onclick="openTab(event, 'recommendationsView')">Recommendations</button>
</div>
<div id="tableView" class="tabcontent">
    @if (Model.SharedMovies is {} movies)
    {
        
        

        <table>
        @if (Model.ComparisonUsers is {} users)
        {

            <tr>
                <th>Name</th>
                @foreach (var user in users)
                {
                    <th>@user.username <br/> Δx̄ @Model.UserDeltas[user.username]</th>
                }
                <th>Group Average Rating</th>
                <th>Total Delta to Average <br/> x̄ @((Model.SharedMovies.Sum(x => x.delta)
                                                      /Model.SharedMovies.Count).ToString())</th>
                @if (Model.SortOrder == SortType.Popularity || Model.SortOrder == SortType.PopularityDesc)
                {
                    <th># of ratings</th>
                }
                <th><div class="dropdown">
                                <button class="dropbtn"><img src="img\sort.svg" alt="Sort" width="36px"/></button>
                                <div class="dropdown-content">
                                    @foreach (var viewSortType in Enum.GetValues(typeof(SortType)).Cast<SortType>())
                                    {
                                        var sb = new StringBuilder();
                                        sb.Append("<div class=\"dropdown-link\"   hx-get='");
                                        sb.Append("https://");
                                        sb.Append(Context.Request.Host.Value);
                                        sb.Append(Context.Request.Path.Value);
                                        sb.Append("?");
                                        sb.Append(Context.Request.Query.Where(x => x.Key != "sortString")
                                            .Aggregate("", (x, y) => ($"{x}{y.Key}={y.Value}&")));
                                        sb.Append($"sortString={viewSortType}");
                                        sb.Append($"' hx-target=\"#userAnalysis\"> {viewSortType} </div>");
                                        @Html.Raw(sb.ToString())
                                    }
                                </div>
                            </div></th>
            </tr>
            @foreach (var movie in movies)
            {
                <tr onclick="showHidenRow('info-@movie.movieData.id')">
                    <td>
                        <a href="https://letterboxd.com/film/film:@movie.movieData.id/">
                            @movie.movieData.name.Split("-").Select(x =>
                                x[..1].ToUpper() + x[1..]).Aggregate("", (x, y) => (x + " " + y))
                        </a>
                    </td>

                    @foreach (var user in users)
                    {
                        <td>@user.userList[movie.Item1.id].ToString()</td>//todo: Work out this rider error, something about boxing. I don't even fight tho.
                    }
                    <td>@Math.Round(movie.Item2,2)</td>
                    <td>@movie.Item3</td>
                    @if (Model.SortOrder == SortType.Popularity || Model.SortOrder == SortType.PopularityDesc)
                                    {
                                        <td>@movie.movieData.RatingCount.ToString()</td>
                                    }
                    <td >
                        <img src="img/expand_more.svg" id="img-info-@movie.movieData.id" alt="Expand"/>
                    </td>
                </tr>
                <tr id="info-@movie.movieData.id" class="hidden-row">
                </tr>
            }
        }
        </table>
    }
</div>

<!-- Graph Section -->
<!-- 60px per movie -->


<div id="graphView" class="tabcontent">
</div>

<!-- Recommendation Section -->
<div id="recommendationsView" class="tabcontent">
    <h3>Recommendations:</h3>
    <p>Recommendations are based on the following criteria:</p>
    <ul>
        <li>No users have seen the movie</li>
        <li>It is related to at least <b>two</b> movies that the group mean rating is > 8</li>
    </ul>
    @if (Model.MovieRecs.Count == 0)
    {
        <h2>Congrats, I don't have any recommendations for you. </h2>
    }
    @foreach (var movie in Model.MovieRecs)
    {           
        <div class="movieRec">
            <a href="https://letterboxd.com/film/film:@movie.id/"><h4>@movie.name.Split("-").Select(x => 
                    x[..1].ToUpper() + x[1..]).Aggregate("", (x, y) => (x + " " + y))</h4></a>
            <p>Duration: @movie.duration mins</p>
            <p>Genres: @movie.attributes.Where(x => x.role == "genre").Aggregate("",(_,y) => ""+y.name)
            </p>
        </div>
    }
</div>


<div id="watchListView" class="tabcontent">
    
</div>








<script>document.getElementById("defaultOpen").click();
</script>