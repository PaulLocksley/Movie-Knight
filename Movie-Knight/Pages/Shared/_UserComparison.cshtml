

@using System.Net.Mime
@using System.Text
@using Microsoft.Extensions.Primitives
@model Movie_Knight.Pages.UserComparison
@{ ArgumentNullException.ThrowIfNull(Model); }
<script>
function openTab(evt, viewName) {
  // Declare all variables
  var i, tabcontent, tablinks;

  // Get all elements with class="tabcontent" and hide them
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }

  // Get all elements with class="tablinks" and remove the class "active"
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }

  // Show the current tab, and add an "active" class to the button that opened the tab
  document.getElementById(viewName).style.display = "block";
  evt.currentTarget.className += " active";
}

function showHidenRow(rowId) { 
    let r = document.getElementById(rowId)
    let img = document.getElementById("img-"+rowId)

    let current = r.style.display 
    console.log(current)
    if(current !== "none"){
        r.style.display = "none"  
        img.src = "img/expand_more.svg"  
    }else{
        r.style.display = "contents"   
        img.src = "img/expand_less.svg"  
    }
    
} 

function filter(type, role, name){
    console.log(type, role,name )
}

</script>

<div class="tab container">
    <button class="tablinks" id="defaultOpen" onclick="openTab(event, 'tableView')">Table</button>
    <button class="tablinks" onclick="openTab(event, 'graphView')">Graphs</button>
    <button class="tablinks" onclick="openTab(event, 'recommendationsView')">Recommendations</button>
</div>
<div id="tableView" class="tabcontent">
    @if (Model.SharedMovies is {} movies)
    {
        <table>
        @if (Model.ComparisonUsers is {} users)
        {

            <tr>
                <th>Name</th>
                @foreach (var user in users)
                {
                    <th>@user.username <br/> Δx̄ @Model.userDeltas[user.username]</th>
                }
                <th>Average Rating</th>
                <th>Total Delta to Average</th>
                <th></th>
            </tr>
            @foreach (var movie in movies)
            {
                <tr onclick="showHidenRow('info-@movie.movieData.id')">
                    <td>
                        <a href="https://letterboxd.com/film/film:@movie.movieData.id/">
                            @movie.movieData.name.Split("-").Select(x =>
                                x[..1].ToUpper() + x[1..]).Aggregate("", (x, y) => (x + " " + y))
                        </a>
                    </td>

                    @foreach (var user in users)
                    {
                        <td>@user.userList[movie.Item1.id]</td>
                    }
                    <td>@Math.Round(movie.Item2,2)</td>
                    <td>@movie.Item3</td>
                    <td >
                        <img src="img/expand_more.svg" id="img-info-@movie.movieData.id" alt="Expand"/>
                    </td>
                </tr>
                <tr id="info-@movie.movieData.id"  class="hidden-row">
                <td colspan="2">
                    <div style="width: 400px"><h6>Description:</h6>
                        <p> @movie.movieData.description </p>
                    </div>
                </td>
                @foreach (var role in Model.displayFilterRolesWeCareAbout)
                {
                    <td colspan="2">
                    <div class="filters">
                        <h5>@(role[0] == "cast" ? "Cast" : "Other" )</h5>
                        <span></span>

                        @foreach (var atr in movie.movieData.attributes.Where(x =>
                            role.Contains(x.role)
                            ))
                        {
                            <div class="filter">
                                <button class="remove-filter" onclick="filter('Remove','@atr.role','@atr.name')">
                                    <img src="img/remove.svg" alt="remove filter"/>
                                </button>
                                <p class="filter-label">@atr.name.Split("-").Select(x =>
                                                    x[..1].ToUpper() + x[1..]).Aggregate("", (x, y) => (x + " " + y))</p>
                                <button class="add-filter" onclick="filter('Require','@atr.role','@atr.name')">
                                    <img src="img/add.svg" alt="Add filter"/>
                                </button>
                            </div>
                        }
                    </div>
                    </td>

                }
                </tr>
            }
        }
        </table>
    }
</div>

<!-- Graph Section -->
<!-- 60px per movie -->


<div id="graphView" class="tabcontent">
    <div id="graphWrapper">
        <canvas id="movieScoreGraph"></canvas>
    </div>
    <div>
        <canvas id="scatterPlot"></canvas>
    </div>
    <div>
        <canvas id="genreRadar"></canvas>
    </div>
    <style>
        #graphView {
          max-width: 100%;
        }
        #graphWrapper {
          overflow-x: auto;
          width: @(Model.SharedMovies.Count * 60)px;
          height: 500px
        }
        #graphWrapper > canvas {
              width: @(Model.SharedMovies.Count * 60)px;
        }
        #movieScoreGraph {
          overflow-x: auto;
        }
    </style>
    <script>
      var ctx = document.getElementById('movieScoreGraph');
    
      new Chart(ctx, {
        type: 'bar',
        data: {
          @Html.Raw(Model.barGraphData.ToString())
        },
        options: {
         responsive: true,
         plugins: {
           legend: {
             position: 'top',
           },
           title: {
             display: true,
             text: 'User Ratings'
           }
         }
       }
      });
      var stx = document.getElementById('scatterPlot');
      new Chart(stx, {
           type: 'scatter',
           data: @Html.Raw(Model.scatterPlotData.ToString()),
           options: {
               plugins:{
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                return `${context.raw.name}: Rating: ${context.raw.y} Frequency: ${context.raw.x}`;
                            }
                        }
                    }
               } 
           } 
      });
      
    var rtx = document.getElementById('genreRadar');
    new Chart(rtx, {
         type: 'radar',
         data: @Html.Raw(Model.radarPlotData.ToString()),
         options: {
             scale: {
                 max: 10,
                 min: 0,
           
             }

         } 
         }
    );
    </script>

</div>


<!-- Recommendation Section -->
<div id="recommendationsView" class="tabcontent">
    <h3>Recommendations:</h3>
    <p>Recommendations are based on the following criteria:</p>
    <ul>
        <li>No users have seen the movie</li>
        <li>It is related to at least <b>two</b> movies that the group mean rating is > 8</li>
    </ul>
    @if (Model.movieRecs.Count == 0)
    {
        <h2>Congrats, I don't have any recommendations for you. </h2>
    }
    @foreach (var movie in Model.movieRecs)
    {           
        <div class="movieRec">
            <a href="https://letterboxd.com/film/film:@movie.id/"><h4>@movie.name.Split("-").Select(x => 
                    x[..1].ToUpper() + x[1..]).Aggregate("", (x, y) => (x + " " + y))</h4></a>
            <p>Duration: @movie.duration mins</p>
            <p>Genres: @movie.attributes.Where(x => x.role == "genre").Aggregate("",(x,y) => ""+y.name)
            </p>
        </div>
    }
</div>










<script>document.getElementById("defaultOpen").click();
</script>